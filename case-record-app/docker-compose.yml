
services:
  # MongoDB Database
  mongodb:
    image: mongo:8.0.12-noble
    container_name: case-record-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: case-record-db
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - case-record-network

  # Backend API Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: case-record-server
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 5000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/case-record-db?authSource=admin
      JWT_SECRET: your-super-secret-jwt-key-for-development
      JWT_EXPIRES_IN: 7d
      CORS_ORIGIN: http://localhost:3000
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
    volumes:
      - ./server:/app
      - /app/node_modules
    networks:
      - case-record-network
    command: npm run dev

  # Frontend React App
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: case-record-client
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
    ports:
      - "3000:3000"
    depends_on:
      - server
    volumes:
      - ./client:/app
      - /app/node_modules
    networks:
      - case-record-network
    command: npm start

  # Redis for caching (optional)
  redis:
    image: redis:7.2-alpine
    container_name: case-record-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - case-record-network

volumes:
  mongodb_data:
  redis_data:

networks:
  case-record-network:
    driver: bridge
